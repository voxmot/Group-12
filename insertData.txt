DROP TABLE IF EXISTS Student;
CREATE TABLE Student(
  student_id varchar(8) UNIQUE NOT NULL PRIMARY KEY, 
  first_name varchar(20), 
  last_name varchar(30) 
);
 
 
DROP TABLE IF EXISTS Resource;
CREATE TABLE Resource(
  resource_id INT NOT NULL PRIMARY KEY UNIQUE AUTO_INCREMENT,
  resource_name varchar(20) NOT NULL, 
  student_capacity INT
);
 
CREATE TABLE Building_Resource(
  resource_id INT NOT NULL UNIQUE,
  building_code VARCHAR(5) NOT NULL,
  PRIMARY KEY(building_code, resource_id)
);
 
 
DROP TABLE IF EXISTS Usage_Record;
CREATE TABLE Usage_Record(
 
  id INT UNIQUE AUTO_INCREMENT, 
  PRIMARY KEY(id),
 
  resource_id INT,
  student_id VARCHAR(20),
  usage_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  
 
  INDEX (student_id),
  FOREIGN KEY (student_id)
    REFERENCES Student(student_id) ON DELETE CASCADE ON UPDATE CASCADE,
 
  INDEX (resource_id),
  FOREIGN KEY (resource_id)
    REFERENCES Resource(resource_id) ON DELETE CASCADE ON UPDATE CASCADE
);
 
            
 
 
 
 
DROP TABLE IF EXISTS Building_Type;
CREATE TABLE Building_Type(
    id INT PRIMARY KEY UNIQUE AUTO_INCREMENT,
    type_name VARCHAR(10) UNIQUE
);
 
 
 
 
 
DROP TABLE IF EXISTS Building;
CREATE TABLE Building(
  building_code VARCHAR(5) UNIQUE PRIMARY KEY, 
  building_type INT NOT NULL,
  building_name VARCHAR(30) NOT NULL, 
  human_capacity INT,
  
  INDEX (building_type),
  FOREIGN KEY (building_type)
    REFERENCES Building_Type(id)
    ON DELETE CASCADE ON UPDATE CASCADE
);
 
# Building Sub-types
DROP TABLE IF EXISTS Academic;
CREATE TABLE Academic(
  building_code VARCHAR(5) UNIQUE PRIMARY KEY,
  coordinator_name VARCHAR(20),
 
  INDEX (building_code),
  FOREIGN KEY (building_code)
    REFERENCES Building(building_code)
);
 
DROP TABLE IF EXISTS Fitness;
CREATE TABLE Fitness(
  building_code VARCHAR(5) UNIQUE PRIMARY KEY,
  organizer_name VARCHAR(20),
  
  INDEX (building_code),
  FOREIGN KEY (building_code)
    REFERENCES Building(building_code)
);
 
DROP TABLE IF EXISTS Health;
CREATE TABLE Health(
  building_code VARCHAR(5) UNIQUE PRIMARY KEY,
  doctor_name VARCHAR(20),
  
  INDEX (building_code),
  FOREIGN KEY (building_code)
    REFERENCES Building(building_code)
);
 
 
INSERT INTO Student(student_id, first_name, last_name) 
  VALUES ('9Fljjssz','Benjamin','Greene'),
        ('dD450NZS','Douglas','Ortiz'),
        ('kjvu1WtS','Rhoda','Foster'),
        ('QbAot6oL','Walter','Carr'),
        ('SNrb0Adh','Etta','Hardy'),
        ('ROkHL2Wo','Edward','Santos'),
        ('lm3mxdIP','Maggie','Simmons');
 
INSERT INTO Building_Type(type_name)
  VALUES  ('Academic'),
          ('Fitness'),
          ('Health');
 
 
INSERT INTO Building(building_code, building_type, building_name, human_capacity) 
    VALUES ('HEC', (SELECT id FROM Building_Type WHERE type_name='Academic' ), 'Harris Engineering', 300);
INSERT INTO Academic(building_code, coordinator_name)
    VALUES ((SELECT building_code FROM Building WHERE building_code='HEC'), 'Douglas Adams');
 
INSERT INTO Building(building_code, building_type, building_name, human_capacity) 
    VALUES ('HLT', (SELECT id FROM Building_Type WHERE type_name='Health' ), 'Pharmacy', 300);
INSERT INTO Health(building_code, doctor, facility_name)
    VALUES ((SELECT building_code FROM Building WHERE building_code='HLT'), 'Dr. Johnson', 'Pharmacy Counter');
 
INSERT INTO Building(building_code, building_type, building_name, human_capacity) 
    VALUES ('GYM', (SELECT id FROM Building_Type WHERE type_name='Fitness' ), 'UCF Gym', 3000);
INSERT INTO Fitness(building_code, facility_name)
    VALUES ((SELECT building_code FROM Building WHERE building_code='GYM'), 'Basketball Court');
 
           
 
 
INSERT INTO Resource(resource_name, student_capacity)
    VALUES      ('Chair', 5),
                ('Bench Press', 157),
                ('Chairs', 23),
                ('Bench Press', 139),
                ('Desk', 18),
                ('Desk', 160),
                ('MRI Machine', 92),
                ('Chairs', 77),
                ('Bench Press', 37),
                ('Desk', 78),
                ('X-Ray Machine', 75),
                ('Desk', 108),
                ('Desk', 22),
                ('Chairs', 191),
                ('Bench Press', 121),
                ('Chairs', 23),
                ('X-Ray Machine', 165),
                ('X-Ray Machine', 189),
                ('Bench Press', 115),
                ('Bench Press', 31),
                ('Chairs', 41),
                ('Desk', 22),
                ('Chairs', 143),
                ('X-Ray Machine', 135),
                ('MRI Machine', 140),
                ('Desk', 114),
                ('Bench Press', 187),
                ('X-Ray Machine', 153),
                ('Chairs', 83),
                ('Chairs', 41),
                ('X-Ray Machine', 63),
                ('Chairs', 179),
                ('X-Ray Machine', 57),
                ('Bench Press', 31),
                ('Desk', 126),
                ('Chairs', 71),
                ('X-Ray Machine', 51),
                ('X-Ray Machine', 87),
                ('X-Ray Machine', 123),
                ('X-Ray Machine', 147),
                ('Chairs', 107),
                ('X-Ray Machine', 69),
                ('Desk', 138),
                ('Bench Press', 73),
                ('MRI Machine', 110),
                ('Chairs', 17),
                ('Bench Press', 37),
                ('X-Ray Machine', 111),
                ('Desk', 108),
                ('X-Ray Machine', 105),
                ('MRI Machine', 134),
                ('MRI Machine', 92),
                ('Bench Press', 79),
                ('Desk', 58),
                ('MRI Machine', 86),
                ('Desk', 162),
                ('Desk', 124),
                ('MRI Machine', 86),
                ('Desk', 132),
                ('Desk', 60),
                ('X-Ray Machine', 27),
                ('Chairs', 5),
                ('Desk', 94),
                ('Desk', 64);